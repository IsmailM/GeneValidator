#!/usr/bin/env ruby
require 'optparse'
require 'validation'
require 'genevalidator/version'
require 'genevalidator/arg_validation'
require 'genevalidator/get_raw_sequences'

opt = {}
opt_parser = OptionParser.new do |opts|
  opts.banner =<<BANNER

USAGE:
    $ genevalidator [OPTIONS] Input_File

ARGUMENTS:
    Input_File: Path to the input fasta file containing the predicted sequences.

BANNER

  opt[:vlist] = ['all']
  opts.on( '-v', '--validations <String>', Array,
          'The Validations to be applied.',
          'Validation Options Available (separated by coma):',
          '  all   = All validations (default),',
          '  lenc  = Length validation by clusterization,',
          '  lenr  = Length validation by ranking,',
          '  merge = Analyse gene merge,',
          '  dup   = Check for duplications,',
          '  frame = Open reading frame (ORF) validation,',
          '  orf   = Main ORF validation,',
          '  align = Validating based on multiple alignment') do |lst|
    opt[:vlist] = lst
  end

  opts.on('-d', '--db [BLAST_DATABASE]', 
         'Path to the BLAST database',
         'GeneValidator also supports remote databases:',
         'e.g.   $ genevalidator -d "remote" Input_File') do |db|
    opt[:db] = db
  end

  opt[:blast_xml_file] = nil
  opts.on('-x', '--blast_xml_file [FILE]',
         'Provide GeneValidator with a pre-computed BLAST XML output',
         'file (BLAST -outfmt option 5).') do |blast_xml_file|
    opt[:blast_xml_file] = blast_xml_file
  end

  opt[:blast_tabular_file] = nil
  opts.on('-t', '--blast_tabular_file [FILE]',
         'Provide GeneValidator with a pre-computed BLAST tabular output',
         'file. (BLAST -outfmt option 6).') do |blast_tabular_file|
    opt[:blast_tabular_file] = blast_tabular_file
  end

  # default blast tabular columns
  opts.on('-o', '--blast_tabular_options [Options]',
          'Custom format used in BLAST -outfmt argument',
         'See BLAST+ manual pages for more details') do |blast_table_options|
    opt[:blast_tabular_options] = blast_table_options
  end

  opts.on('-m', '--mafft_bin [MAFFT_PATH]',
          'Path to MAFFT bin folder') do |mafft|
    opt[:mafft_bin] = mafft
  end

  opts.on('-b', '--blast_bin [BLAST_PATH]',
          'Path to BLAST+ bin folder') do |blast|
    opt[:blast_bin] = blast
  end

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads num_of_threads',
          'Specify the number of processor threads to use when running',
          'BLAST and Mafft within GeneValidator.') do |num_threads|
    opt[:num_threads] = num_threads
  end

  opts.on('--version', 'The version of GeneValidator that you are running.') do
      puts GeneValidator::VERSION
      exit
  end

  opts.on('-h', '--help', 'Show this screen.') do
    puts opt_parser
    exit
  end
end

begin
  opt_parser.parse!(ARGV)
  if ARGV.length > 1
    $stderr.puts 'Error: you must specify a single fasta input file instead' +
                 ' of #{ARGV.length}.' + '\n'
    exit 1
  elsif ARGV.length == 0
    puts opt_parser
    exit 1
  end
rescue OptionParser::ParseError
  $stderr.print 'Error: ' + $! + '\n'
  exit 1
end

start = Time.now

GVArgValidation.validate_args(opt)

if opt[:blast_xml_file] || opt[:blast_tabular_file]
  opt[:raw] = GetRawSequences.run(opt)
end

b = Validation.new(ARGV[0], opt[:vlist], opt[:blast_tabular_file], 
                   opt[:blast_tabular_options], opt[:blast_xml_file],
                   opt[:db], opt[:raw], opt[:start], opt[:num_threads])
b.validation
puts "Total running time: #{(Time.now - start).round(3)}s"
puts # a blank line
