#!/usr/bin/env ruby
require 'optparse'
require 'validation'
require 'genevalidator/version'

options = {}
opt_parser = OptionParser.new do |opt|
  opt.banner =<<BANNER

USAGE:
    $ genevalidator [OPTIONS] INPUT_FILE

ARGUMENTS:
    INPUT_FILE: Path to the input FASTA file containing the predicted sequences.

OPTIONAL ARGUMENTS:

BANNER

  options[:vlist] = ['all']
  opt.on( '-v', '--validations <String>', Array, 
          'The Validations to be applied.',
          'Validation Options Available (separated by coma):',
          '  all    = run all validations (default)',
          '  lenc   = length validation by clusterization',
          '  lenr   = length validation by ranking',
          '  frame  = reading frame validation',
          '  merge  = check gene merge',
          '  dup    = check duplications',
          '  orf    = main ORF validation (applicable for nucleotides)',
          '  align  = validation based on multiple alignment',
          '  codons = codon coverage ~ under development') do |lst|
    options[:vlist] = lst
  end

  options[:db] = 'swissprot -remote'
  opt.on('-d', '--db [BLAST_DATABASE]', 'base where to look up the sequences',
         'e.g. "swissprot -remote" or a local BLAST database') do |db|
    options[:db] = db
  end
    
  options[:skip_blast] = nil
  opt.on('-x', '--skip_blast [FILENAME]', 
         'Skip blast-ing part and provide a blast xml or tabular output', 
         'as input to this script.',
         'Only BLAST xml (BLAST -outfmt 5) or basic tabular (BLAST -outfmt 6',
         'or 7) outputs accepted') do |skip|
    options[:skip_blast] = skip
  end

  # default blast tabular columns
  opt.on('-t', '--tabular [BLAST OUTFMT STRING]', 
         'Custom format used in BLAST -outfmt argument',
         'Usage:',
         '   $ genevalidator -x tabular_file -t "slen qstart qend" INPUT_FILE',
         ' See the manual pages of BLAST for more details'
    ) do |lst|
    options[:tabular] = lst
  end

  opt.on('-m', '--mafft [MAFFT_PATH]', 
         'Path to MAFFT program installation') do |mafft|
    options[:mafft] = mafft
  end

  opt.on('-b', '--blast [BLAST_PATH]', 'Path to BLAST+ bin folder') do |blast|
    options[:blast] = blast
  end

  opt.on('-r', '--raw_seq [FASTA_FILE]', 
         'Fasta file containing the raw sequences of each of the BLAST hits in',
         'BLAST XML output file.') do |raw|
    options[:raw] = raw
  end

  options[:num_threads] = 1
  opt.on('-n', '--num_threads num_of_threads', 'Specify the number of processor',
          'threads to utilise when running GeneValidator.') do |num_threads|
    options[:num_threads] = num_threads
  end


  opt.on('--version', 'The version of GeneValidator that you are running.') do
      puts GeneValidator::VERSION
      exit
  end

  opt.on('-h', '--help', 'Show this screen.') do
    puts opt_parser
    exit
  end
end

begin
  opt_parser.parse!(ARGV)

  if options[:skip_blast] != nil && options[:db] != 'swissprot -remote'
    $stderr.puts 'The skip_blast ("-x") and database (-d) arguments cannot' \
                 ' both be set in the same run.'\
                 ' Please specify only skip_blast argument if you have' \
                 ' already precomputed the BLAST output.'
  end

  if ARGV.length > 1
    $stderr.puts 'Error: you must specify a single fasta input file instead' \
                 ' of #{ARGV.length}.' + '\n'
    exit
  elsif ARGV.length == 0
    puts opt_parser
    exit
  end

  rescue OptionParser::ParseError
    $stderr.print 'Error: ' + $! + '\n'
    exit
end

  start = Time.now

  b = Validation.new(ARGV[0], options[:vlist], options[:tabular],
                     options[:skip_blast], options[:db], options[:raw],
                     options[:mafft], options[:blast], options[:start], 
                     options[:num_threads])
  b.validation
  puts "Total running time: #{(Time.now - start).round(3)}s\n"
