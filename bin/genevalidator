#!/usr/bin/env ruby
require 'optparse'
require 'validation'
require 'genevalidator/version'
require 'genevalidator/arg_validation'
require 'genevalidator/get_raw_sequences'
opt = {}
opt_parser = OptionParser.new do |opts|
  opts.banner =<<BANNER

USAGE:
    $ genevalidator [OPTIONS] INPUT_FILE

ARGUMENTS:
    INPUT_FILE: Path to the input FASTA file containing the predicted sequences.

OPTIONAL ARGUMENTS:

BANNER

  opt[:vlist] = ['all']
  opts.on( '-v', '--validations <String>', Array,
          'The Validations to be applied.',
          'Validation Options Available (separated by coma):',
          '  all   = All validations (default),',
          '  lenc  = Length validation by clusterization,',
          '  lenr  = Length validation by ranking,',
          '  merge = Analyse gene merge,',
          '  dup   = Check for duplications,',
          '  frame = Open reading frame (ORF) validation,',
          '  orf   = Main ORF validation,',
          '  align = Validating based on multiple alignment') do |lst|
    opt[:vlist] = lst
  end

  opt[:db] = 'swissprot -remote'
  opts.on('-d', '--db [BLAST_DATABASE]', 'Name of the BLAST database',
         'e.g. "swissprot -remote" or a local BLAST database',
         'Default is "swissprot -remote') do |db|
    opt[:db] = db
  end

  opt[:blast_xml_file] = nil
  opts.on('-x', '--blast_xml_file [FILENAME]',
         'Provide GeneValidator with a pre-computed BLAST output file',
         'GeneValidator only supports xml and basic tabular outputs',
         '(BLAST -outfmt options 5-7)') do |blast_xml_file|
    opt[:blast_xml_file] = blast_xml_file
  end

  opt[:blast_tabular_file] = nil
  opts.on('-t', '--blast_tabular_file [FILENAME]',
         'Provide GeneValidator with a pre-computed BLAST output file',
         'GeneValidator only supports xml and basic tabular outputs',
         '(BLAST -outfmt options 5-7)') do |blast_tabular_file|
    opt[:blast_tabular_file] = blast_tabular_file
  end

  # default blast tabular columns
  opts.on('-o', '--blast_tabular_options [BLAST OUTFMT STRING]',
         'Custom format used in BLAST -outfmt argument',
         'Usage:',
         '   $ genevalidator -t blast_tabular_file -o "slen qstart qend" INPUT_FILE',
         'See BLAST+ manual pages for more details'
    ) do |blast_table_options|
    opt[:blast_tabular_options] = blast_table_options
  end

  opts.on('-m', '--mafft_bin [MAFFT_PATH]',
          'Path to MAFFT bin folder') do |mafft|
    opt[:mafft_bin] = mafft
  end

  opts.on('-b', '--blast_bin [BLAST_PATH]',
          'Path to BLAST+ bin folder') do |blast|
    opt[:blast_bin] = blast
  end

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads num_of_threads', 'Specify the number of',
          'processor threads to utilise when running BLAST and Mafft within',
          'GeneValidator.') do |num_threads|
    opt[:num_threads] = num_threads
  end

  opts.on('--version', 'The version of GeneValidator that you are running.') do
      puts GeneValidator::VERSION
      exit
  end

  opts.on('-h', '--help', 'Show this screen.') do
    puts opt_parser
    exit
  end
end

begin
  opt_parser.parse!(ARGV)

  if ARGV.length > 1
    $stderr.puts 'Error: you must specify a single fasta input file instead' +
                 ' of #{ARGV.length}.' + '\n'
    exit 1
  elsif ARGV.length == 0
    puts opt_parser
    exit 1
  end

  rescue OptionParser::ParseError
    $stderr.print 'Error: ' + $! + '\n'
    exit 1
end

start = Time.now

# Validate BLAST installation
if opt[:blast_bin]
  GVArgValidation::Blast.export_bin_dir(opt[:blast_bin])
else
  GVArgValidation::Blast.assert_blast_installed_and_compatible
end

# Validate BLAST database
if opt[:db] !~ /remote/
  GVArgValidation::Blast.assert_blast_database_exists(opt[:db])
end

# Validate Mafft installation
if opt[:mafft_bin]
  GVArgValidation::Mafft.export_bin_dir(opt[:mafft_bin])
else
  GVArgValidation::Mafft.assert_mafft_installed
end

# Obtain Raw Sequences from db if XML file is provided
if opt[:blast_xml_file] != nil
  opt[:raw] = opt[:blast_xml_file] + '.raw_seq'
  Get_raw_sequences.run(opt[:raw], opt[:db], opt[:blast_xml_file])
end

# Obtain Raw Sequences from db if BLAST table file is provided
if opt[:blast_tabular_file] != nil
  opt[:raw] = opt[:blast_tabular_file] + '.raw_seq'
  Get_raw_sequences.run(opt[:raw], opt[:db], opt[:blast_tabular_file], 
                        opt[:blast_tabular_options])
end

b = Validation.new(ARGV[0], opt[:vlist], opt[:blast_tabular_file], 
                   opt[:blast_tabular_options], opt[:blast_xml_file],
                   opt[:db], opt[:raw], opt[:start], opt[:num_threads])
b.validation
puts "Total running time: #{(Time.now - start).round(3)}s"
puts # a blank line
