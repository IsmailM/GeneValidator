#!/usr/bin/env ruby
require 'optparse'
require 'genevalidator/sequences'
require 'genevalidator/blast'
require 'genevalidator/exceptions'
require 'genevalidator/tabular_parser'
require 'bio-blastxmlparser'
require 'net/http'
require 'open-uri'
require 'uri'
require 'io/console'
require 'yaml'

options = {}
opt_parser = OptionParser.new do |opt|
  opt.separator  ""
  opt.banner = "USE:"
  opt.separator  "\t $ get_raw_sequences BLAST_OUTPUT_FILE -o OUTPUT_FILE [-t TABULAR_FORMAT] [-d DATABASES] [-n NR]"

  # default blast tabular columns
  opt.on("-d", "--db [DATABASES]","list of databases where to look up the sequences") do |lst|
    options[:tabular] = lst
  end

  # default blast tabular columns
  opt.on("-t", "--tabular [BLAST OUTFMT STRING]","custom format used in BLAST -outfmt argument") do |lst|
    options[:tabular] = lst
  end
  
  options[:nr] = 10
  opt.on("-n","--nr [NR]", Integer, "number of queries per query that must be retrieved from the database") do |nr|
    if start.is_a? Fixnum
      options[:nr] = nr
    else
      $stderr.print "Error: n must be a natural number." + "\n"
    end
  end

  options[:out] = "raw_sequences.fasta"
  opt.on("-o", "--output [OUTPUT_FILE]","name of the output file") do |out|
    options[:out] = out
  end

  opt.on("-h","--help","help") do
    puts opt_parser
    exit
  end
end

opt_parser.parse!(ARGV)

if ARGV.length != 1
  puts opt_parser
end

if options[:db] == nil
  $stderr.print "Error: db argument is mandatory\n."
  puts opt_parser
end

db = "../../../ncbi-blast-2.2.28+/db/nr/nr"
output_file = options[:out]
n = options[:nr]

File.open(output_file, 'w') {|f| f.write("") }

begin
  output = File.open(ARGV[0], "rb").read
  iterator_xml = Bio::BlastXMLParser::NokogiriBlastXml.new(output).to_enum
  iterator_tab = TabularParser.new(output, "", "")
  begin
    iter = iterator_xml.next
    
    # parse blast the xml output and get the first 10 hits
    cnt = 0
    iter.each do | hit |
      if cnt == n
        break
      end
      #get the raw sequence
      blast_cmd = "blastdbcmd -entry #{hit.accession} -db #{db} -outfmt %f" 
      output = %x[#{blast_cmd} 2>/dev/null]

      if output != "" and output.match(/error/) == nil and output.match(/ERROR/) == nil
        File.open(output_file, 'a') {|f| f.write(output) }        
      else
        $stderr.print "Identifier not found in your database. Or... did you add BLAST path to the LOADPATH?\n"        
      end

      #puts blast_cmd
      #puts hit.accession
      cnt += 1
    end
=begin
    begin
      puts "Note: Please specify the --tabular argument if you used tabular format input with nonstandard columns.\n"
      hits = iterator_tab.next
      if hits == nil
        break
      end
            do_validations(hits)
    rescue Exception => error
      $stderr.print "Blast file error at #{error.backtrace[0].scan(/\/([^\/]+:\d+):.*/)[0][0]}. Possible cause: blast output file format is neihter xml nor tabular.\n"
      exit!
    end
=end
  
  rescue StopIteration
    exit
#  rescue Exception
#    puts "nither tabular not xml"
  end while 1
end
       

