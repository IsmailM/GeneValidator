#!/usr/bin/env ruby
require 'genevalidator/sequences'
require 'genevalidator/blast'
require 'genevalidator/exceptions'
require 'genevalidator/tabular_parser'
require 'optparse'
require 'bio-blastxmlparser'
require 'net/http'
require 'open-uri'
require 'uri'
require 'io/console'
require 'yaml'

options = {}
opt_parser = OptionParser.new do |opt|
  opt.separator  ""
  opt.banner = "USE:"
  opt.separator  "\t $ get_raw_sequences BLAST_OUTPUT_FILE -o OUTPUT_FILE -d DATABASES [-n NR] [-t TABULAR_FORMAT]"

  opt.separator  ""

  # default blast tabular columns
  opt.on("-d", "--db DATABASES","database where to look up the sequences") do |db|
    options[:db] = db
  end

  options[:tabular] = "qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore"
  # default blast tabular columns
  opt.on("-t", "--tabular [BLAST OUTFMT STRING]","custom format used in BLAST -outfmt argument") do |lst|
    options[:tabular] = lst
  end

  options[:nr] = 10
  opt.on("-n","--nr [NR]", Integer, "number of queries per query that must be retrieved from the database") do |nr|
    if start.is_a? Fixnum
      options[:nr] = nr
    else
      $stderr.print "Error: n must be a natural number." + "\n"
    end
  end

  options[:out] = "raw_sequences.fasta"
  opt.on("-o", "--output [OUTPUT_FILE]","name of the output file") do |out|
    options[:out] = out
  end

  opt.on("-h","--help","help") do
    puts opt_parser
    exit
  end
end

opt_parser.parse!(ARGV)

if ARGV.length != 1
  puts opt_parser
  exit!
end

if options[:db] == nil
  $stderr.print "Error: db argument is mandatory\n."
  puts opt_parser
  exit!
end

output_file = options[:out]
db = options[:db]

# some of the hits may be identical hits and
# therefore considered in the analisys
n = options[:nr] + 5

def parse_hits(hits, n = 15, hit_id_idx = 0, accno_idx, db, output_file)

      cnt = 0
      hits.group_by{|hit| hit[hit_id_idx]}.each do |idx, hit|

        if cnt == n
          break
        end

        accession = hit[0][accno_idx]

        #get the raw sequence
        blast_cmd = "blastdbcmd -target_only -entry '#{accession}' -db '#{db}' -outfmt '%f'"
        output_blast = %x[#{blast_cmd}  2>&1]

        if output_blast.downcase.match(/blastdbcmd/) != nil
          $stderr.print "Did you add BLAST path to the LOADPATH?\n"
        else
          if output_blast.downcase.match(/database error/) != nil
            $stderr.print "Blast database error. The path is not complete or your custom database is not well configured. \n"
          else
            if output_blast.downcase.match(/error/) != nil
              $stderr.print "Sequence #{accession} not found in your database. Trying to download it from the internet... "

              # try to get the sequence from the Internet
              begin
                uri = "http://www.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein"<<
                   "&retmax=1&usehistory=y&term=#{accession}/"

                result = Net::HTTP.get(URI.parse(uri))

                result2 = result
                queryKey = result2.scan(/<\bQueryKey\b>([\w\W\d]+)<\/\bQueryKey\b>/)[0][0]
                webEnv = result.scan(/<\bWebEnv\b>([\w\W\d]+)<\/\bWebEnv\b>/)[0][0]

                uri = "http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?rettype=fasta&"<<
                   "retmode=text&retstart=0&retmax=1&db=protein&query_key=#{queryKey}&WebEnv=#{webEnv}"
                result = Net::HTTP.get(URI.parse(uri))
                output_blast = result[0..result.length-2]

                unless  output_blast.downcase.index(/error/) == nil
                  raise Exception
                end
                $stderr.print "success\n"
              rescue Exception => error
                $stderr.print "fail\n"
              end
            end

            if output_blast != ""
              File.open(output_file, 'a') {|f| f.write(output_blast) }
            end
          end
        end
        cnt += 1
      end
end

File.open(output_file, 'w') {|f| f.write("") }

begin
  filename = ARGV[0]

  puts "Downloading raw sequences..."

  iterator_xml = Bio::BlastXMLParser::XmlIterator.new(filename).to_enum
  begin
    iter = iterator_xml.next
    # parse blast the xml output and get the first 10 hits
    cnt = 0
    iter.each do | hit |
      if cnt == n
	break
      end
      #get the raw sequence
      blast_cmd = "blastdbcmd -target_only -entry #{hit.identifier} -db #{db} -outfmt %f"
      output = %x[#{blast_cmd} 2>&1]

      if output.downcase.match(/blastdbcmd/) != nil
        $stderr.print "Did you add BLAST path to the LOADPATH?\n"
      else
        if output.downcase.match(/database error/) != nil
          $stderr.print "Blast database error. The path is not complete or your custom database is not well configured.\n"
        else
          if output.downcase.match(/error/) != nil
            $stderr.print "Sequence #{hit.accession} not found in your database. Trying to download it from the internet... "

            # try to get the sequence from the Internet
            begin
              uri = "http://www.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein"<<
                 "&retmax=1&usehistory=y&term=#{hit.accession}/"

              result = Net::HTTP.get(URI.parse(uri))

              result2 = result
              queryKey = result2.scan(/<\bQueryKey\b>([\w\W\d]+)<\/\bQueryKey\b>/)[0][0]
              webEnv = result.scan(/<\bWebEnv\b>([\w\W\d]+)<\/\bWebEnv\b>/)[0][0]

              uri = "http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?rettype=fasta&"<<
                 "retmode=text&retstart=0&retmax=1&db=protein&query_key=#{queryKey}&WebEnv=#{webEnv}"
              result = Net::HTTP.get(URI.parse(uri))
              output = result[0..result.length-2]

              unless  output.downcase.index(/error/) == nil
                raise Exception
              end
              $stderr.print "success\n"
            rescue Exception => error
              $stderr.print "fail\n"
            end
          end

          if output != ""
            File.open(output_file, 'a') {|f| f.write(output) }
          end
        end
      end

      cnt += 1
    end
  end while 1
rescue StopIteration => error
  exit
rescue Exception => error
  begin
    format = options[:tabular]
    column_names = format.split(/[ ,]/)
    query_id_idx = column_names.index("qseqid")
    hit_id_idx   = column_names.index("sseqid")
    accno_idx    = column_names.index("sacc")

    file = File.open(filename, "r");
    lines = file.lines

    entry = CSV.parse(lines.peek, :col_sep => "\t")[0]
    unless entry.length == column_names.length
      raise InconsistentTabularFormat
    end

    while 1 do
    begin
      # get next query
      hits = []

      entry = CSV.parse(lines.peek, :col_sep => "\t")[0]
      query_id = entry[query_id_idx]

      while 1
        entry = CSV.parse(lines.peek, :col_sep => "\t")[0]

        unless query_id == entry[query_id_idx]
          break
        end

        hits << entry
        lines.next
      end

      parse_hits(hits, n, hit_id_idx, accno_idx, db, output_file)

    rescue StopIteration => error
      parse_hits(hits, n, hit_id_idx, accno_idx, db, output_file)
      break
    end
    end

  rescue InconsistentTabularFormat =>error
    $stderr.print "Tabular format error at #{error.backtrace[0].scan(/\/([^\/]+:\d+):.*/)[0][0]}. "<<
      "Possible cause: The tabular file and the tabular header do not correspond. "<<
      "Please provide -tabular argument with the correct format of the columns\n"
    exit!
  rescue Exception => error
    $stderr.print "Blast file error at #{error.backtrace[0].scan(/\/([^\/]+:\d+):.*/)[0][0]}. Possible cause: blast output file format is neihter xml nor tabular.\n"
    exit!
  end
end
